name: Plane App Test

on:
  workflow_dispatch:

jobs:
  plane:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Make setup.sh executable
        run: chmod +x setup.sh
        
      - name: Cache Plane installation
        uses: actions/cache@v3
        with:
          path: plane-app
          key: ${{ runner.os }}-plane-${{ hashFiles('setup.sh') }}
          restore-keys: |
            ${{ runner.os }}-plane-

      - name: Install Plane
        run: ./setup.sh install

      - name: Start Plane
        run: ./setup.sh start
      
      - name: Check if action was 'start'
        id: checkStart
        run: echo "ran=${{ github.event.inputs.action == 'start' }}" >> $GITHUB_OUTPUT

      - name: Wait for Plane API to start
        run: |
          echo "Waiting for Plane API to become available..."
          for i in {1..30}; do
            if curl -s http://localhost/ > /dev/null; then
              echo "Plane API is up ✅"
              exit 0
            fi
            echo "Waiting ($i/30)..."
            sleep 5
          done
          echo "❌ Plane API did not start in time"
          exit 1
          
      - name: Smoke test
        run: |
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost/)
          if [ "$STATUS" -eq 200 ]; then
            echo "✅ Plane API responded OK"
          else
            echo "❌ API returned $STATUS"
            exit 1
          fi

      - name: Get CSRF Token
        id: get_csrf
        run: |
          echo "Getting CSRF token..."
          curl -s -c cookies.txt http://localhost/auth/get-csrf-token/ -o response.json
          cat response.json
          
          CSRF_TOKEN=$(jq -r '.csrf_token' response.json)
          echo "CSRF_TOKEN=$CSRF_TOKEN" >> $GITHUB_ENV
      
      - name: Perform Account Sign-Up
        id: signup
        run: |
          echo "Signing up..."
          curl -s -b cookies.txt http://localhost/api/instances/admins/sign-up/ \
            -F "csrfmiddlewaretoken=$CSRF_TOKEN" \
            -F "is_telemetry_enabled=True" \
            -F "first_name=Temp" \
            -F "last_name=User" \
            -F "email=tempuser@mail.com" \
            -F "company_name=test" \
            -F "password=Test@123" \
            -F "confirm_password=Test@123" -o signup_response.json

          echo "Signup response:"
          cat signup_response.json

      - name: Get CSRF Token POST Signup
        id: get_csrf_post_signup
        run: |
          echo "Getting CSRF token..."
          curl -s -c cookies.txt http://localhost/auth/get-csrf-token/ -o response.json
          cat response.json
          
          CSRF_TOKEN=$(jq -r '.csrf_token' response.json)
          echo "CSRF_TOKEN=$CSRF_TOKEN" >> $GITHUB_ENV

      - name: Perform Sign-In
        id: signin
        run: |
          echo "Logging in..."
          curl -s -b cookies.txt -c cookies.txt http://localhost/auth/sign-in/ \
            --data-urlencode "csrfmiddlewaretoken=$CSRF_TOKEN" \
            --data-urlencode "email=tempuser@mail.com" \
            --data-urlencode "password=Test@123" -o signin_response.json

          echo "Login response:"
          cat signin_response.json

          # Validate login
          SUCCESS=$(jq -r '.success // empty' signin_response.json)
          if [[ "$SUCCESS" != "true" && "$SUCCESS" != "True" ]]; then
            echo "❌ Login failed"
            exit 1
          fi

          echo "✅ Login successful"
        
      - name: Restore npm cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Restore Playwright browser cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Load .env to GitHub ENV
        run: |
          if [ -f .env ]; then
            echo "Loading .env values..."
            cat .env >> $GITHUB_ENV
          fi

      - name: Run Playwright tests
        env:
        # These override or supplement .env file values
          EMAIL: df@gmail.com
          PASSWORD: fds
          USER_NAME: fds
          WORKSPACE_HOST: localhost/
        run: |
          npx playwright test --grep @pipeline-test

      # Optional: Upload test report
      # - name: Upload HTML Report
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: playwright-report
      #     path: playwright-report/
